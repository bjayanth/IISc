#include<stdio.h>
#include<stdlib.h>
#define read 0
#define write 1
//#define n 1000
#define ipfile "/home/smart/Desktop/CCPP/Filters/ECG data/ecg_plot_4.csv"
#define opfile "/home/smart/Desktop/CCPP/Filters/filt out/ecg_plot_4out2.txt"

FILE *file1,*file2;

void lpf(double[],double[]);
void hpf(double[],double[]);
void der(double[],double[]);
void sqr(double[],double[]);
void mwi(double[],double[]);
void avg(double[]);
void rev(double[]);
void rwfile(FILE *,double[],int);
void disp(double[]);
void count(FILE *);
int n;

int main()
{
 file1=fopen(ipfile,"r");
 file2=fopen(opfile,"w");
 float a;int cnt=0;
 double *x,*y1,*y2,*y3,*y4,*y5,*y6,*y7,*y8,*y9;

count(file1);
file1=fopen(ipfile,"r");
printf("Number of Samples = %d\n",n);

x=(double *) malloc(n*sizeof(double));
y1=(double *) malloc(n*sizeof(double));
y2=(double *) malloc(n*sizeof(double));
y3=(double *) malloc(n*sizeof(double));
y4=(double *) malloc(n*sizeof(double));

y5=(double *) malloc(n*sizeof(double));
y6=(double *) malloc(n*sizeof(double));
y7=(double *) malloc(n*sizeof(double));
y8=(double *) malloc(n*sizeof(double));
y9=(double *) malloc(n*sizeof(double));


//Read data from file
 rwfile(file1,x,read);

 avg(x);

//LPF
 lpf(x,y1);
 rev(y1);
 lpf(y1,y2);
 rev(y2);

//HPF
 hpf(y2,y3);
 rev(y3);
 hpf(y3,y4);
 rev(y4);


//Derivative
 der(y4,y5);
 rev(y5);
 der(y5,y6);
 rev(y6);

//Squaring
 sqr(y6,y7);

//Moving window integrator
 mwi(y7,y8);
 rev(y8);
 mwi(y8,y9);
 rev(y9);


//Write into file
 rwfile(file2,y9,write);

 fclose(file1);
 fclose(file2);
 free(x);free(y1);free(y2);free(y3);free(y4);
 free(y5);free(y6);free(y7);free(y8);free(y9);
 //disp(y);

 return 0;
}


void hpf(double ip[],double op[])
{
 int i,l;
 
	for(i=0;i<n;i++)
	{	//printf("%f\n",x[i-12]);
	    	
		if(i-1<0)
			l=0;
		else l=1;
		switch(l)
		{
			case 0: op[i]=0.9622*ip[i]; 
				break;
			default:op[i]=0.9244*op[i-1]+0.9622*ip[i]-0.9622*ip[i-1];
		}
	    	//printf(" - %f\n",y[i]);
	}
}


void rev(double ip[])
{
  int i;
  double temp;
  for(i=0;i<n/2;i++)
	{
		temp=ip[i];
		ip[i]=ip[n-1-i];
		ip[n-1-i]=temp;
	}
}

void rwfile(FILE *file,double x[],int flag)
{
  int i;
  
 	if(flag==read)
	{	
	 float a;
  	 for(i=0;i<n;i++)
 			{
  			  fscanf(file,"%f",&a);
  			  x[i]=a;
 			}
	}	
	else
		{
		  for(i=0;i<n;i++)
 		  	fprintf(file,"%f\n",x[i]);
		}
}

void disp(double x[])
{
  int i;
  for(i=0;i<n;i++)
  	printf("%f\n",x[i]);
}  

void lpf(double ip[],double op[])
{
 int i,l;
 	for(i=0;i<n;i++)
	{		    	
		if(i-1<0)
			l=0;
		else l=1;
		switch(l)
		{
			case 0: op[i]=0.1058*ip[i];
				break;
			default:op[i]=0.7883*op[i-1]+0.1058*ip[i]+0.1058*ip[i-1];
		}
	}
}


void der(double ip[],double op[])
{
 int i,l;
 	for(i=0;i<n;i++)
	{		    	
		if(i-1<0)
			l=0;
		else if(i-3<0)
			l=1;
		else if(i-4<0)
			l=2;
		else l=3;
		switch(l)
		{
			case 0: op[i]=(2*ip[i])/8;
				break;
			case 1: op[i]=(2*ip[i]+ip[i-1])/8;
				break;
			case 2: op[i]=(2*ip[i]+ip[i-1]-ip[i-3])/8;
				break;
			default:op[i]=(2*ip[i]+ip[i-1]-ip[i-3]-2*ip[i-4])/8;
		}
	}
}


void sqr(double ip[],double op[])
{
 int i;
 for(i=0;i<n;i++)
	op[i]=ip[i]*ip[i];
}

void mwi(double ip[],double op[])
{
 int i,l;
 for(i=0;i<n;i++)
	{
	 op[i]=0.0;
	 for(l=0;l<60 && (i-l)>=0;l++)
	 	op[i]+=ip[i-l];
	 op[i]/=60.0;
	}
}

void count(FILE *file)
{
  float a;int cnt=0;
  	 while(fscanf(file,"%f",&a)!=EOF)
 		cnt++;
	 n=cnt;
	 fclose(file);
	// printf("%d\n",n);
}

void avg(double ip[])
{
 int i;double avg=0.0;
 for(i=0;i<n;i++)
 	avg+=ip[i];
 avg/=(double)n;
 printf("Average = %f\n",avg);
 for(i=0;i<n;i++)
 	ip[i]-=avg;
}
